{"version":3,"sources":["../../src/customer/addresses.js"],"names":["config","db","router","post","req","res","next","Address","findById","body","address","then","status","json","message","newUser","User","country","user","catch","console","log","err","error","save","response","_id","result","name","email","gsm","request","decription","type","url","users","push","send"],"mappings":";;;;;;AACA;;AACA;;;;AACA;;;;;;;;AAEA;;;;kBAIe,gBAGT;AAAA,MAFJA,MAEI,QAFJA,MAEI;AAAA,MADJC,EACI,QADJA,EACI;;AACJ,MAAIC,SAAS,sBAAb;;AAEA;AACA;AACAA,SAAOC,IAAP,CAAY,GAAZ;AAAA,wEAAiB,iBAAOC,GAAP,EAAYC,GAAZ,EAAiBC,IAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBACTC,kBAAQC,QAAR,CAAiBJ,IAAIK,IAAJ,CAASC,OAA1B,EACHC,IADG,CACE,mBAAW;AACf,oBAAI,CAACD,OAAL,EAAc;AACZ,yBAAOL,IAAIO,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAC1BC,6BAAS;AADiB,mBAArB,CAAP;AAGD;AACD,oBAAMC,UAAU,IAAIC,cAAJ,CAAS;AACvBC,2BAASb,IAAIK,IAAJ,CAASQ,OADK;AAEvBC,wBAAMd,IAAIK,IAAJ,CAASS;AAFQ,iBAAT,CAAhB;AAIH,eAXK,EAWHC,KAXG,CAWG,eAAO;AACZC,wBAAQC,GAAR,CAAYC,GAAZ;AACAjB,oBAAIO,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AACnBU,yBAAOD;AADY,iBAArB;AAGAF,wBAAQC,GAAR,CAAYC,GAAZ,EAAiB;AACjBP,wBAAQS,IAAR,GACGb,IADH,CACQ,kBAAU;AACd,sBAAMc,WAAW;AACfX,6BAAS,mDADM;AAEfI,0BAAM;AACJQ,2BAAKC,OAAOD,GADR;AAEJE,4BAAMD,OAAOC,IAFT;AAGJC,6BAAOF,OAAOE,KAHV;AAIJC,2BAAKH,OAAOG,GAJR;AAKJpB,+BAASiB,OAAOjB;AALZ,qBAFS;AASfqB,6BAAS;AACPC,kCAAY,UADL;AAEPC,4BAAM,KAFC;AAGPC,mEAA2CP,OAAOD;AAH3C;AATM,mBAAjB;;AAgBAhB,0BAAQyB,KAAR,CAAcC,IAAd,CAAmBrB,OAAnB;AACAL,0BAAQc,IAAR,CAAa,eAAO;AAClB,wBAAIF,GAAJ,EAAS;AACPjB,0BAAIO,MAAJ,CAAW,GAAX,EAAgByB,IAAhB,CAAqBf,GAArB;AACD;AACDjB,wBAAIO,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqBY,QAArB;AACA;AACA;AACD,mBAPD;AAQA;AACA;AACD,iBA7BH,EA6BKN,KA7BL,CA6BW,eAAO;AACdC,0BAAQC,GAAR,CAAYC,GAAZ;AACAjB,sBAAIO,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AACnBU,2BAAOD;AADY,mBAArB;AAGAF,0BAAQC,GAAR,CAAYC,GAAZ;AACA;AACD,iBApCH;AAqCD,eAtDG,CADS;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAjB;;AAAA;AAAA;AAAA;AAAA;AAyDD,C","file":"addresses.js","sourcesContent":["\r\nimport {Router} from \"express\";\r\nimport User from \"./user\";\r\nimport Address from \"./address\";\r\n\r\n/**\r\n  * @author Arif Dogru\r\n  */\r\n\r\nexport default ({\r\n  config,\r\n  db\r\n}) => {\r\n  let router = Router();\r\n\r\n  // ADD User\r\n  // v1/addresses\r\n  router.post(\"/\", async (req, res, next) => {\r\n    await Address.findById(req.body.address)\r\n      .then(address => {\r\n        if (!address) {\r\n          return res.status(404).json({\r\n            message: \"Address not found\"\r\n          });\r\n        }\r\n        const newUser = new User({\r\n          country: req.body.country,\r\n          user: req.body.user\r\n        });\r\n    }).catch(err => {\r\n        console.log(err);\r\n        res.status(500).json({\r\n          error: err\r\n        });\r\n        console.log(err);;\r\n        newUser.save()\r\n          .then(result => {\r\n            const response = {\r\n              message: \"User created succesfully with these informations.\",\r\n              user: {\r\n                _id: result._id,\r\n                name: result.name,\r\n                email: result.email,\r\n                gsm: result.gsm,\r\n                address: result.address\r\n              },\r\n              request: {\r\n                decription: \"GET_USER\",\r\n                type: \"GET\",\r\n                url: `http://localhost:3000/V1/addresses/${result._id}`\r\n              }\r\n            };\r\n\r\n            address.users.push(newUser);\r\n            address.save(err => {\r\n              if (err) {\r\n                res.status(500).send(err);\r\n              }\r\n              res.status(201).json(response);\r\n              // console.log(response);\r\n              // TODO: log\r\n            });\r\n            // console.log(response);\r\n            // TODO: log\r\n          }).catch(err => {\r\n            console.log(err);\r\n            res.status(500).json({\r\n              error: err\r\n            });\r\n            console.log(err);\r\n            // TODO: log\r\n          });\r\n      });\r\n  });\r\n};\r\n"]}