{"version":3,"sources":["../../src/customer/users.js"],"names":["config","db","router","post","req","res","next","newUser","User","name","body","email","password","gsm","phone","save","then","response","message","user","_id","result","request","decription","type","url","status","json","catch","console","log","err","error","patch","id","params","userId","updateOperations","ops","propName","value","update","$set","exec","delete","remove","role","organization","get","find","select","count","results","length","users","map","createdAt","updatedAt","findById"],"mappings":"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","file":"users.js","sourcesContent":["import { Router } from \"express\";\r\nimport User from \"./user\";\r\n\r\n/**\r\n* @author Alper Akalin\r\n*/\r\n\r\nexport default ({\r\n  config,\r\n  db\r\n}) => {\r\n  let router = Router();\r\n\r\n  // ADD User\r\n  // v1/users\r\n  router.post(\"/\", async (req, res, next) => {\r\n    const newUser = new User({\r\n      name: req.body.name,\r\n      email: req.body.email,\r\n      password: req.body.password,\r\n      gsm: req.body.gsm,\r\n      phone: req.body.phone\r\n\r\n    });\r\n    await newUser.save()\r\n      .then(result => {\r\n        const response = {\r\n          message: \"User created succesfully with these informations.\",\r\n          user: {\r\n            _id: result._id,\r\n            name: result.name,\r\n            email: result.email,\r\n            gsm: result.gsm,\r\n            phone: result.phone\r\n          },\r\n          request: {\r\n            decription: \"GET_USER\",\r\n            type: \"GET\",\r\n            url: `http://localhost:3000/V1/users/${result._id}`\r\n          }\r\n        };\r\n\r\n        res.status(201).json(response);\r\n      }).catch(err => {\r\n        console.log(err);\r\n        res.status(500).json({\r\n          error: err\r\n        });\r\n        console.log(err);\r\n        // TODO: log\r\n      });\r\n  });\r\n\r\n  // UPDATE user by id\r\n  // dinamik olarak belirli alanları günceller\r\n  // v1/users/:id\r\n  router.patch(\"/:userId\", async (req, res, next) => {\r\n    const id = req.params.userId;\r\n    const updateOperations = {};\r\n    for (const ops of req.body) {\r\n      updateOperations[ops.propName] = ops.value;\r\n    }\r\n    await User.update({\r\n      _id: id\r\n    }, {\r\n      $set: updateOperations\r\n    })\r\n      .exec()\r\n      .then(result => {\r\n        const response = {\r\n          message: \"User updated succesfully.\",\r\n          request: {\r\n            decription: \"GET_USER\",\r\n            type: \"GET\",\r\n            url: `http://localhost:3000/V1/users/${id}`\r\n          }\r\n        };\r\n        res.status(201).json(response);\r\n        // console.log(response);\r\n        // TODO: log\r\n      }).catch(err => {\r\n        res.status(500).json({\r\n          error: err\r\n        });\r\n        console.log(err);\r\n        // TODO: log\r\n      });\r\n  });\r\n\r\n  // DELETE user by id\r\n  // v1/users/:id\r\n  router.delete(\"/:userId\", async (req, res, next) => {\r\n    const id = req.params.userId;\r\n    await User.remove({\r\n      _id: id\r\n    })\r\n      .exec()\r\n      .then(result => {\r\n        const response = {\r\n          message: \"User deleted succesfully.\",\r\n          request: {\r\n            type: \"POST\",\r\n            decription: \"ADD_USER\",\r\n            url: \"http://localhost:3000/V1/users/\",\r\n            body: {\r\n              name: \"String\",\r\n              email: \"String\",\r\n              role: \"String\",\r\n              gsm: \"String\",\r\n              phone: \"String\",\r\n              type: \"String\",\r\n              status: \"String\",\r\n              organization: \"Organization\"\r\n            }\r\n          }\r\n        };\r\n        res.status(200).json(response);\r\n        // console.log(response);\r\n        // TODO: log\r\n      }).catch(err => {\r\n        res.status(500).json({\r\n          error: err\r\n        });\r\n        console.log(err);\r\n        // TODO: log\r\n      });\r\n  });\r\n\r\n  // GET all users\r\n  // v1/users\r\n  router.get(\"/\", async (req, res, next) => {\r\n    await User.find()\r\n      .select(\"_id name email gsm phone createdAt updatedAt\")\r\n      .exec()\r\n      .then(results => {\r\n        const response = {\r\n          message: \"All Users\",\r\n          count: results.length,\r\n          users: results.map(results => {\r\n            return {\r\n              _id: results._id,\r\n              name: results.name,\r\n              email: results.email,\r\n              role: results.role,\r\n              gsm: results.gsm,\r\n              phone: results.phone,\r\n              type: results.type,\r\n              status: results.status,\r\n              createdAt: results.createdAt,\r\n              updatedAt: results.updatedAt,\r\n              organization: results.organization,\r\n              request: {\r\n                decription: \"GET_ALL_USERS\",\r\n                type: \"GET\",\r\n                url: `http://localhost:3000/V1/users/${results._id}`\r\n              }\r\n            };\r\n          })\r\n        };\r\n        res.status(200).json(response);\r\n        // console.log(response);\r\n        // TODO: log\r\n      })\r\n      .catch(err => {\r\n        res.status(500).json({\r\n          error: err\r\n        });\r\n        console.log(err);\r\n        // TODO: log\r\n      });\r\n  });\r\n\r\n  // GET user by id\r\n  // v1/users/:id\r\n  router.get(\"/:userId\", async (req, res, next) => {\r\n    const id = req.params.userId;\r\n    await User.findById(id)\r\n      .select(\"_id name email gsm phone createdAt updatedAt\")\r\n      .exec()\r\n      .then(result => {\r\n        if (result) {\r\n          const response = {\r\n            message: \"A User information.\",\r\n            user: result,\r\n            request: {\r\n              decription: \"GET_ALL_USERS\",\r\n              type: \"GET\",\r\n              url: `http://localhost:3000/V1/users`\r\n            }\r\n          };\r\n          res.status(200).json(response);\r\n          // console.log(response);\r\n          // TODO: log\r\n        } else {\r\n          res.status(500).json({\r\n            message: \"No valid entry found for requested ID.\"\r\n          });\r\n          console.log({\r\n            message: \"No valid entry found for requested ID.\"\r\n          });\r\n          // TODO: log\r\n        }\r\n      })\r\n      .catch(err => {\r\n        res.status(500).json({\r\n          error: err\r\n        });\r\n        console.log(err);\r\n        // TODO: log\r\n      });\r\n  });\r\n\r\n  return router;\r\n};\r\n"]}