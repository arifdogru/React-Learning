{"version":3,"sources":["../src/index.js"],"names":["app","server","http","createServer","use","bodyParser","urlencoded","extended","json","limit","config","bodyLimit","route","listen","port","console","log","address","Date","toISOString","req","res","next","header","method","status","error","Error","message"],"mappings":";;;;;;AAAA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;;;AAEA,IAAIA,MAAM,wBAAV;AACAA,IAAIC,MAAJ,GAAaC,eAAKC,YAAL,CAAkBH,GAAlB,CAAb;;AAEA;AACAA,IAAII,GAAJ,CAAQ,4BAAR;;AAEAJ,IAAII,GAAJ,CAAQ,sBAAO,mHAAP,CAAR;;AAEA;AACAJ,IAAII,GAAJ,CAAQC,qBAAWC,UAAX,CAAsB,EAAEC,UAAU,IAAZ,EAAtB,CAAR;AACAP,IAAII,GAAJ,CAAQC,qBAAWG,IAAX,CAAgB,EAAEC,OAAOC,iBAAOC,SAAhB,EAAhB,CAAR;;AAEA;AACAX,IAAII,GAAJ,CAAQ,KAAR,EAAeQ,eAAf;AACAZ,IAAIC,MAAJ,CAAWY,MAAX,CAAkBH,iBAAOI,IAAzB;AACAC,QAAQC,GAAR,CAAY,qBAAmBhB,IAAIC,MAAJ,CAAWgB,OAAX,GAAqBH,IAAxC,YAAqD,IAAII,IAAJ,GAAWC,WAAX,EAAjE;;AAEA;AACAnB,IAAII,GAAJ,CAAQ,UAACgB,GAAD,EAAMC,GAAN,EAAWC,IAAX,EAAoB;AAC1BD,MAAIE,MAAJ,CAAW,6BAAX,EAA0C,GAA1C;AACA;AACAF,MAAIE,MAAJ,CAAW,8BAAX,EAA2C,+DAA3C;AACAF,MAAIE,MAAJ,CAAW,iBAAX,EAA8B,mBAA9B;AACA,MAAIH,IAAII,MAAJ,KAAe,SAAnB,EAA8B;AAC5BH,QAAIE,MAAJ,CAAW,8BAAX,EAA2C,+BAA3C;AACA,WAAOF,IAAII,MAAJ,CAAW,GAAX,EAAgBjB,IAAhB,CAAqB,EAArB,CAAP;AACD;AACDc;AACD,CAVD;;AAYA;AACA;AACAtB,IAAII,GAAJ,CAAQ,UAACgB,GAAD,EAAMC,GAAN,EAAWC,IAAX,EAAoB;AAC1B,MAAMI,QAAQ,IAAIC,KAAJ,CAAU,WAAV,CAAd;AACAD,QAAMD,MAAN,GAAe,GAAf;AACAH,OAAKI,KAAL;AACD,CAJD;;AAMA;AACA1B,IAAII,GAAJ,CAAQ,UAACsB,KAAD,EAAQN,GAAR,EAAaC,GAAb,EAAkBC,IAAlB,EAA2B;AACjCD,MAAII,MAAJ,CAAWC,MAAMD,MAAN,IAAgB,GAA3B;AACAJ,MAAIb,IAAJ,CAAS;AACPkB,WAAO;AACLE,eAASF,MAAME;AADV;AADA,GAAT;AAKD,CAPD;;kBASe5B,G","file":"index.js","sourcesContent":["import http from \"http\";\r\nimport express from \"express\";\r\nimport compression from \"compression\";\r\nimport bodyParser from \"body-parser\";\r\nimport morgan from \"morgan\";\r\nimport config from \"./core/config\";\r\nimport route from \"./core/route\";\r\n\r\nlet app = express();\r\napp.server = http.createServer(app);\r\n\r\n// TODO:\r\napp.use(compression());\r\n\r\napp.use(morgan(\":date[iso] :method :status :url content-length: :res[content-length] response-time: :response-time ms :user-agent\"));\r\n\r\n// parse application/json\r\napp.use(bodyParser.urlencoded({ extended: true }));\r\napp.use(bodyParser.json({ limit: config.bodyLimit }));\r\n\r\n// api routes V...\r\napp.use(\"/v1\", route);\r\napp.server.listen(config.port);\r\nconsole.log(`Started on port ${app.server.address().port} at ` + new Date().toISOString());\r\n\r\n// Acces Control\r\napp.use((req, res, next) => {\r\n  res.header(\"Access-Control-Allow-Origin\", \"*\");\r\n  // yıldız yerine sadece bir url verilerek diğer url lerden gelen istekler engellenebilir\r\n  res.header(\"Access-Control-Allow-Headers\", \"Origin, X-Requested-With, Content-Type, Accept, Authorization\");\r\n  res.header(\"Accept-Encoding\", \"br, gzip, deflate\");\r\n  if (req.method === \"OPTIONS\") {\r\n    res.header(\"Access-Control-Allow-Methods\", \"PUT, POST, PATCH, DELETE, GET\");\r\n    return res.status(200).json({});\r\n  }\r\n  next();\r\n});\r\n\r\n// --COMMON ERROR HANDLING--\r\n// error handling -\r\napp.use((req, res, next) => {\r\n  const error = new Error(\"Not found\");\r\n  error.status = 404;\r\n  next(error);\r\n});\r\n\r\n// all unecpected errors handler\r\napp.use((error, req, res, next) => {\r\n  res.status(error.status || 500);\r\n  res.json({\r\n    error: {\r\n      message: error.message\r\n    }\r\n  });\r\n});\r\n\r\nexport default app;\r\n"]}